import { sqliteTable, text, integer, blob } from 'drizzle-orm/sqlite-core';
import { sql } from 'drizzle-orm';

// Users table - Updated to use text ID for better compatibility with auth libraries
export const users = sqliteTable('users', {
  id: text('id').primaryKey().notNull(), // Use text ID (e.g., CUID/UUID) generated by auth lib
  // Add other user fields like username if needed later
  email: text('email').notNull().unique(),
  createdAt: integer('created_at', { mode: 'timestamp' }).notNull().default(sql`(unixepoch())`),
});

// Passkeys table for WebAuthn credentials
export const passkeys = sqliteTable('Passkey', { // Naming convention from example
  id: text('id').primaryKey().notNull(),
  userId: text('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }), // Foreign key to users
  publicKey: blob('public_key', { mode: 'buffer' }).notNull(), // Store public key as buffer
  webauthnUserId: text('webauthn_user_id').notNull().unique(), // Unique ID from WebAuthn
  counter: integer('counter').notNull(),
  deviceType: text('device_type').notNull(), // e.g., 'singleDevice' or 'multiDevice'
  backedUp: integer('backed_up', { mode: 'boolean' }).notNull(),
  transports: text('transports'), // Comma-separated list like 'internal,hybrid'
  createdAt: integer('created_at', { mode: 'timestamp' }).default(sql`(unixepoch())`),
});

export const testCounter = sqliteTable('test_counter', {
  id: integer('id').primaryKey(), 
  count: integer('count').notNull().default(0)
});
